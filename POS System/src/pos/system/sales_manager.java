/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos.system;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Color;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Samsung
 */
public class sales_manager extends javax.swing.JFrame {

    String name;
    String staff_id;
    String email;
    String type;
    String product_code;
    String product;
    String expiry;
    String text;

    String staff_name;
    String dob;
    String department;
    int limit;
    int quantity;
    String staffId;
    String Dname;
    String Demail;
    int count;

    List<String> messages = new ArrayList<>();

    /**
     * Creates new form sales_manager
     */
    public sales_manager(String name, String email, String staff_id, String type) {
        initComponents();
        this.name = name;
        this.staff_id = staff_id;
        this.email = email;
        this.type = type;

        jLabel2.setText(name);
        jLabel3.setText(email);
        jLabel4.setText(staff_id);
        jLabel5.setText(type);

        checkBirthday();
        checkExpiry();
        getStaffRecords();
        getTopSellingItems();
        DayOftheWeekReport();
        WeeklyReport();
        MonthlyReport();
        YearlyReport();

        for (String message : messages) {
            jTextArea1.append("- " + message + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableDay = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableWeek = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableMonth = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableYear = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sales Manager");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setForeground(new java.awt.Color(0, 0, 0));

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "Staff Name", "Count of Sales in total", "Email", "Remark"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Metrics Staffs", jPanel1);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Messages", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setForeground(new java.awt.Color(0, 0, 0));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "Name", "Date", "Sales ID"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jLabel6.setText("Search staffs sales per date");

        jLabel7.setText("Count per date");

        jLabel8.setText("jLabel8");

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Search Using Staff ID");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addGap(101, 101, 101)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                .addGap(323, 323, 323))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(0, 419, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(70, 70, 70)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(399, 399, 399)
                                .addComponent(jButton3)))
                        .addContainerGap())))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel9)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Search Using Date", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Code", "Item", "Amount sold so far"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane5.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Highest selling product", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        jTableDay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Highest Selling Product", "Quantity of that product per day", "Total items sold for the day", "Total Price gained"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableDay);

        jTableWeek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Week", "Highest selling item", "Quantity of highest selling item", "Total items sold", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableWeek);

        jTableMonth.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Month", "Highest Selling Item", "Quantity of highest selling item", "Total items sold", "Total price gained"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTableMonth);

        jTableYear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Highest selling item", "Quantity of highest selling item", "Total items sold", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTableYear);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Generated Report", jPanel5);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 114, -1, -1));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 6, -1, -1));

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 6, -1, -1));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("jLabel5");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("jLabel4");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("jLabel3");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addGap(91, 91, 91)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(122, 122, 122)
                .addComponent(jLabel5)
                .addGap(47, 47, 47))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 720, 40));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/market1.jpg"))); // NOI18N
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 150));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void DayOftheWeekReport() {

        DefaultTableModel tableModel = (DefaultTableModel) jTableDay.getModel();

// Clear existing rows in the table
        tableModel.setRowCount(0);

// SQL queries for separate data retrieval
        String selectQueryTotals = "SELECT date, "
                + "SUM(quantity) AS total_quantity, "
                + "SUM(price) AS total_price "
                + "FROM sales_report "
                + "GROUP BY date "
                + "ORDER BY date";

        String selectQueryHighestItem = "SELECT date, "
                + "name AS highest_selling_item, "
                + "SUM(quantity) AS quantity_of_highest_selling_item "
                + "FROM sales_report "
                + "WHERE date = ? " // Add a WHERE clause to filter by date
                + "GROUP BY date, name "
                + "ORDER BY date, quantity_of_highest_selling_item DESC "
                + "LIMIT 1";

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
                PreparedStatement preparedStatement1 = connection.prepareStatement(selectQueryTotals);
                PreparedStatement preparedStatement2 = connection.prepareStatement(selectQueryHighestItem)) {

            // Get results for totals
            ResultSet resultSetTotals = preparedStatement1.executeQuery();

            // Iterate through totals and fetch highest-selling item details for each date
            while (resultSetTotals.next()) {
                String date = resultSetTotals.getString("date");
                int totalQuantity = resultSetTotals.getInt("total_quantity");
                double totalPrice = resultSetTotals.getDouble("total_price");

                // Prepare to fetch highest-selling item details for this date
                preparedStatement2.setString(1, date);  // Set date parameter for second query
                ResultSet resultSetHighestItem = preparedStatement2.executeQuery();

                if (resultSetHighestItem.next()) {
                    String highestSellingItem = resultSetHighestItem.getString("highest_selling_item");
                    int quantityOfHighestSellingItem = resultSetHighestItem.getInt("quantity_of_highest_selling_item");

                    // Create row with combined data
                    Object[] row = new Object[]{date, highestSellingItem, quantityOfHighestSellingItem, totalQuantity, totalPrice};
                    tableModel.addRow(row);
                } else {
                    // Handle case where no highest-selling item found for this date
                    Object[] row = new Object[]{date, "", 0, totalQuantity, totalPrice};
                    tableModel.addRow(row);
                }

                resultSetHighestItem.close();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error retrieving data: " + e.getMessage());
        }

    }

private void WeeklyReport() {

    DefaultTableModel tableModel = (DefaultTableModel) jTableWeek.getModel();
    tableModel.setRowCount(0);  // Clear existing rows

    String selectQueryTotals = "SELECT WEEK(date) AS week_of_month, "
                              + "SUM(quantity) AS total_quantity, "
                              + "SUM(price) AS total_price "
                              + "FROM sales_report "
                              + "GROUP BY WEEK(date) "
                              + "ORDER BY week_of_month";

    String selectQueryHighestItem = "SELECT WEEK(date) AS week_of_month, "
                                  + "name AS highest_selling_item, "
                                  + "SUM(quantity) AS quantity_of_highest_selling_item "
                                  + "FROM sales_report "
                                  + "WHERE WEEK(date) = ? " // Filter by week
                                  + "GROUP BY WEEK(date), name "
                                  + "ORDER BY quantity_of_highest_selling_item DESC "
                                  + "LIMIT 1";

    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement preparedStatement1 = connection.prepareStatement(selectQueryTotals);
            PreparedStatement preparedStatement2 = connection.prepareStatement(selectQueryHighestItem)) {

        ResultSet resultSetTotals = preparedStatement1.executeQuery();

        while (resultSetTotals.next()) {
            int weekOfMonth = resultSetTotals.getInt("week_of_month");
            int totalQuantity = resultSetTotals.getInt("total_quantity");
            double totalPrice = resultSetTotals.getDouble("total_price");

            preparedStatement2.setInt(1, weekOfMonth);  // Set week parameter
            ResultSet resultSetHighestItem = preparedStatement2.executeQuery();

            if (resultSetHighestItem.next()) {
                String highestSellingItem = resultSetHighestItem.getString("highest_selling_item");
                int quantityOfHighestItem = resultSetHighestItem.getInt("quantity_of_highest_selling_item");

                Object[] row = new Object[]{weekOfMonth, highestSellingItem, quantityOfHighestItem, totalQuantity, totalPrice};
                tableModel.addRow(row);
            } else {
                Object[] row = new Object[]{weekOfMonth, "", 0, totalQuantity, totalPrice};
                tableModel.addRow(row);
            }

            resultSetHighestItem.close();
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "Error retrieving data: " + e.getMessage());
    }
}

private void MonthlyReport() {

    DefaultTableModel tableModel = (DefaultTableModel) jTableMonth.getModel();
    tableModel.setRowCount(0);  // Clear existing rows

    String selectQueryTotals = "SELECT MONTH(date) AS month, "
                              + "SUM(quantity) AS total_quantity, "
                              + "SUM(price) AS total_price "
                              + "FROM sales_report "
                              + "GROUP BY MONTH(date) "
                              + "ORDER BY month";

    String selectQueryHighestItem = "SELECT MONTH(date) AS month, "
                                  + "name AS highest_selling_item, "
                                  + "SUM(quantity) AS quantity_of_highest_selling_item "
                                  + "FROM sales_report "
                                  + "WHERE MONTH(date) = ? " // Filter by month
                                  + "GROUP BY MONTH(date), name "
                                  + "ORDER BY quantity_of_highest_selling_item DESC "
                                  + "LIMIT 1";

    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement preparedStatement1 = connection.prepareStatement(selectQueryTotals);
            PreparedStatement preparedStatement2 = connection.prepareStatement(selectQueryHighestItem)) {

        ResultSet resultSetTotals = preparedStatement1.executeQuery();

        while (resultSetTotals.next()) {
            int month = resultSetTotals.getInt("month");
            int totalQuantity = resultSetTotals.getInt("total_quantity");
            double totalPrice = resultSetTotals.getDouble("total_price");

            preparedStatement2.setInt(1, month);  // Set month parameter
            ResultSet resultSetHighestItem = preparedStatement2.executeQuery();

            if (resultSetHighestItem.next()) {
                String highestSellingItem = resultSetHighestItem.getString("highest_selling_item");
                int quantityOfHighestItem = resultSetHighestItem.getInt("quantity_of_highest_selling_item");

                Object[] row = new Object[]{month, highestSellingItem, quantityOfHighestItem, totalQuantity, totalPrice};
                tableModel.addRow(row);
            } else {
                Object[] row = new Object[]{month, "", 0, totalQuantity, totalPrice};
                tableModel.addRow(row);
            }

            resultSetHighestItem.close();
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "Error retrieving data: " + e.getMessage());
    }
}

private void YearlyReport() {

    DefaultTableModel tableModel = (DefaultTableModel) jTableYear.getModel();
    tableModel.setRowCount(0);  // Clear existing rows

    String selectQueryTotals = "SELECT YEAR(date) AS year, "
                              + "SUM(quantity) AS total_quantity, "
                              + "SUM(price) AS total_price "
                              + "FROM sales_report "
                              + "GROUP BY YEAR(date) "
                              + "ORDER BY year";

    String selectQueryHighestItem = "SELECT YEAR(date) AS year, "
                                  + "name AS highest_selling_item, "
                                  + "SUM(quantity) AS quantity_of_highest_selling_item "
                                  + "FROM sales_report "
                                  + "WHERE YEAR(date) = ? " // Filter by year
                                  + "GROUP BY YEAR(date), name "
                                  + "ORDER BY quantity_of_highest_selling_item DESC "
                                  + "LIMIT 1";

    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement preparedStatement1 = connection.prepareStatement(selectQueryTotals);
            PreparedStatement preparedStatement2 = connection.prepareStatement(selectQueryHighestItem)) {

        ResultSet resultSetTotals = preparedStatement1.executeQuery();

        while (resultSetTotals.next()) {
            int year = resultSetTotals.getInt("year");
            int totalQuantity = resultSetTotals.getInt("total_quantity");
            double totalPrice = resultSetTotals.getDouble("total_price");

            preparedStatement2.setInt(1, year);  // Set year parameter
            ResultSet resultSetHighestItem = preparedStatement2.executeQuery();

            if (resultSetHighestItem.next()) {
                String highestSellingItem = resultSetHighestItem.getString("highest_selling_item");
                int quantityOfHighestItem = resultSetHighestItem.getInt("quantity_of_highest_selling_item");

                Object[] row = new Object[]{year, highestSellingItem, quantityOfHighestItem, totalQuantity, totalPrice};
                tableModel.addRow(row);
            } else {
                Object[] row = new Object[]{year, "", 0, totalQuantity, totalPrice};
                tableModel.addRow(row);
            }

            resultSetHighestItem.close();
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "Error retrieving data: " + e.getMessage());
    }
}

    private void getStaffRecords() {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

            // Clear existing rows in the table
            tableModel.setRowCount(0);

            //using the joined table
            String selectQuery = "SELECT * FROM sales_metric AS sm JOIN users AS ur ON sm.staff_id = ur.staff_id";

            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

            ResultSet resultSet = preparedStatement.executeQuery();

            //map
            Map<String, Integer> salesCountMap = new HashMap<>();

            while (resultSet.next()) {
                staffId = resultSet.getObject("staff_id").toString();

                // Check if the staff_id is already in the map
                if (salesCountMap.containsKey(staffId)) {
                    // If yes, increment the sales count
                    salesCountMap.put(staffId, salesCountMap.get(staffId) + 1);
                } else {
                    // If not, add the staff_id to the map with a sales count of 1
                    salesCountMap.put(staffId, 1);
                }
            }

// Iterate over the salesCountMap to create rows with final counts
            for (Map.Entry<String, Integer> entry : salesCountMap.entrySet()) {
                staffId = entry.getKey();
                int finalCount = entry.getValue();

                // Fetch the name and email based on the staff_id from the database
                Dname = null;
                Demail = null;

                // Assuming you have a database connection named "connection"
                try {
                    String Query = "SELECT name, email FROM users WHERE staff_id = " + staffId;
                    ResultSet detailsResultSet = preparedStatement.executeQuery(Query);

                    if (detailsResultSet.next()) {
                        // Get the name and email from the result set
                        Dname = detailsResultSet.getString("name");
                        Demail = detailsResultSet.getString("email");
                    }
                } catch (Exception e) {
                    e.printStackTrace(); // Handle the exception appropriately
                }

                if (finalCount >= 10) {
                    // Create a row with the relevant data
                    Object[] row = new Object[5];
                    row[0] = staffId; // Replace with the actual name retrieval logic
                    row[1] = Dname;
                    row[2] = finalCount;
                    row[3] = Demail; // Replace with the actual email retrieval logic
                    row[4] = "Good Cashier";
                    tableModel.addRow(row);
                } else {
                    // Create a row with the relevant data
                    Object[] row = new Object[5];
                    row[0] = staffId; // Replace with the actual name retrieval logic
                    row[1] = Dname;
                    row[2] = finalCount;
                    row[3] = Demail; // Replace with the actual email retrieval logic
                    row[4] = "Bad Cashier";
                    tableModel.addRow(row);
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void getTopSellingItems() {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) jTable3.getModel();

            // Clear existing rows in the table
            tableModel.setRowCount(0);

            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
            jTable3.setRowSorter(sorter);
            // Using the joined table
            String selectQuery = "SELECT * FROM inventory ORDER BY amount_sold DESC";

            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

            ResultSet resultSet = preparedStatement.executeQuery();

            int rowIndex = 0;

            while (resultSet.next()) {
                // Create a row with the relevant data
                Object[] row = new Object[3];
                row[0] = resultSet.getObject("product_code");
                row[1] = resultSet.getObject("product_name");
                row[2] = resultSet.getObject("amount_sold");

                tableModel.addRow(row);

                // Check if this is the highest amount_sold row
                int highestAmountSoldRowIndex = jTable3.getRowSorter().convertRowIndexToView(0); // Assuming sorted in descending order
                if (rowIndex == highestAmountSoldRowIndex) {
                    jTable3.setRowSelectionInterval(rowIndex, rowIndex);
                    jTable3.setSelectionBackground(Color.GREEN); // Set the background color

                    Object productCode = tableModel.getValueAt(highestAmountSoldRowIndex, 0);
                    Object productName = tableModel.getValueAt(highestAmountSoldRowIndex, 1);
                    Object amountSold = tableModel.getValueAt(highestAmountSoldRowIndex, 2);

                    jTextArea2.append("Highest Amount Sold; \n"
                            + "Product Code: " + productCode + "\n"
                            + "Product Name: " + productName + "\n"
                            + "Amount Sold: " + amountSold);
                }

                rowIndex++;
            }
            // Print out the information for the row with the highest amount_sold

        } catch (Exception e) {
            e.printStackTrace(); // Handle the exception appropriately, e.g., logging or showing a message dialog
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel td = (DefaultTableModel) jTable1.getModel();
        td.setRowCount(0);

        getStaffRecords();
        JOptionPane.showMessageDialog(rootPane, "Refreshed");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            String staffid1 = jTextField1.getText();

            SimpleDateFormat dat = new SimpleDateFormat("yyyy-MM-dd");
            String date = dat.format(jDateChooser1.getDate());

            DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();

            // Clear existing rows in the table
            tableModel.setRowCount(0);

            String selectQuery = "SELECT * FROM sales_metric AS sm JOIN users AS ur ON sm.staff_id = ur.staff_id where sm.staff_id = ? and sm.date =?";

            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

            // Execute the query and process the results
            preparedStatement.setString(1, staffid1);
            preparedStatement.setString(2, date);

            ResultSet resultSet = preparedStatement.executeQuery();

            // Iterate through the result set and add rows to the tableModel
            while (resultSet.next()) {
                //column count   
                Object[] row = new Object[4];

                // Replace "columnName1", "columnName2", ... with actual column names
                row[0] = resultSet.getObject("staff_id");
                row[1] = resultSet.getObject("name");
                row[2] = resultSet.getObject("date");
                row[3] = resultSet.getObject("id");

                // Add more columns as needed
                // Add the row to the tableModel
                tableModel.addRow(row);
                count++;
            }
            jLabel8.setText("" + count);
            count = 0;
            JOptionPane.showMessageDialog(rootPane, "Data Loaded into the table.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    private void checkExpiry() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");                               //db name       //username //password
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement ps = con.prepareStatement("select * from inventory");

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                product = rs.getString(1);  //product name
                expiry = rs.getString(5);

                System.out.println(product);
                System.out.println(expiry);

                LocalDate currentDate = LocalDate.now();

                // Parse expiry to LocalDate
                LocalDate expiryDate = LocalDate.parse(expiry, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                // Calculate one month before expiry
                LocalDate oneMonthBeforeExpiry = expiryDate.minusMonths(1);

                // Check if the current date is one month before the expiry date
                //if it is equal to one month exactly
                if (currentDate.isEqual(oneMonthBeforeExpiry) && currentDate.isBefore(expiryDate)) {
                    long daysLeft = ChronoUnit.DAYS.between(currentDate, expiryDate);
                    text = product + " expiry approaching. " + daysLeft + " 1 month to expiry";
                    messages.add(text);
                    JOptionPane.showMessageDialog(rootPane, text);
                    System.out.println(product);

                    //if it is after oneMonth of xpiry but before expiry
                } else if (currentDate.isAfter(oneMonthBeforeExpiry) && currentDate.isBefore(expiryDate)) {
                    long daysLeft = ChronoUnit.DAYS.between(currentDate, expiryDate);
                    text = product + " expiry approaching. " + daysLeft + " days to expiry";
                    messages.add(text);
                    JOptionPane.showMessageDialog(rootPane, text);
                    System.out.println(product);

                } else if (currentDate.equals(expiryDate) || currentDate.isAfter(expiryDate)) {
                    text = product + " expired on " + expiry;
                    messages.add(text);
                    JOptionPane.showMessageDialog(null, text);
                }
            }

        } catch (Exception e) {

        }

    }

    private void checkBirthday() {
        //check birthday
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");                               //db name       //username //password
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement ps = con.prepareStatement("select * from users");

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

                staff_name = rs.getString(1); //name
//                jTextField4.setText(rs.getString(2));
//                jTextField5.setText(rs.getString(7));

                department = rs.getString(4);
                type = rs.getString(5);
                dob = rs.getString(6);

                LocalDate currentDate = LocalDate.now();

                //converts it to mm-dd
                String currentDayMonth = currentDate.format(DateTimeFormatter.ofPattern("MM-dd"));

                //gets users birth date
                // Extract day and month from the user's date
                String userDayMonth = new SimpleDateFormat("MM-dd").format(new SimpleDateFormat("yyyy-MM-dd").parse(dob));

                if (currentDayMonth.equals(userDayMonth)) {
                    // Show a birthday message
                    text = "Happy Birthday, " + staff_name + "!";
                    JOptionPane.showMessageDialog(rootPane, text);
                    messages.add(text);
                    System.out.println(staff_name);
                    System.out.println(department);
                }
            }

        } catch (Exception e) {

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sales_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sales_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sales_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sales_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sales_manager("", "", "", "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTableDay;
    private javax.swing.JTable jTableMonth;
    private javax.swing.JTable jTableWeek;
    private javax.swing.JTable jTableYear;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
