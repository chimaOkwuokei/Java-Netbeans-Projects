package pos.system;

import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.*;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import static pos.system.Admin.photo;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Samsung
 */
public class Sales extends javax.swing.JFrame {

    String name;
    String staff_id;
    String email;

    String product_name;
    String product_code;
    String manufacturer;
    String manufacturing_date;
    String expiry_date;
    int quantity;
    double sub_total;
    double price;
    //String resultString;
    double tax;
    int quantity_limit;

    String staff_name;
    String dob;
    String department;
    String type;

    String product;
    String expiry;
    String text;
    List<String> messages = new ArrayList<>();

    //for the remove item stuff like when the table row is clicked
    int dprice;
    int dquan;
    String dproduct;

    int amount_sold;
    double dprice1;
    int dquan1;
    //ends here

    int purchaseId;
    int sales_per_day;
    double new_price;

    //
    //
    List<String> resultString = new ArrayList<>();

    int m = 0;

    /**
     * Creates new form Sales
     */
    public Sales(String name, String email, String staff_id) {
        initComponents();
        this.staff_id = staff_id;
        this.email = email;
        this.name = name;

        jName.setText(name);
        jLabel3.setText(email);
        jLabel4.setText(staff_id);

        paucafe();
        checkBirthday();

        checkExpiry();

        for (String message : messages) {
            jTextArea2.append("- " + message + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPrint = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSubTotal = new javax.swing.JTextField();
        jTax = new javax.swing.JTextField();
        jTotal = new javax.swing.JTextField();
        jTotalBtn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jClear = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 10, -1, -1));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setForeground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setText("Search Item");

        jLabel6.setText("Quantity");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Product Code", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jAdd.setText("Add Item");
        jAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPrint.setText("Print");
        jPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrintActionPerformed(evt);
            }
        });

        jLabel7.setText("Sub Total");

        jLabel8.setText("Tax");

        jLabel9.setText("Total");

        jSubTotal.setEditable(false);
        jSubTotal.setText("0.00");
        jSubTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSubTotalActionPerformed(evt);
            }
        });

        jTax.setEditable(false);
        jTax.setText("0.00");

        jTotal.setEditable(false);
        jTotal.setText("0.00");

        jTotalBtn.setText("Total");
        jTotalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTotalBtnActionPerformed(evt);
            }
        });

        jButton5.setText("Delete Item");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jAdd))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTotalBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPrint))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSubTotal)
                            .addComponent(jTax)
                            .addComponent(jTotal))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jAdd)
                    .addComponent(jPrint)
                    .addComponent(jTotalBtn)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Make Sales", jPanel1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Messages", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 120, -1, -1));

        jClear.setText("Clear");
        jClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearActionPerformed(evt);
            }
        });
        getContentPane().add(jClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 69, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Hi!");

        jName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jName.setForeground(new java.awt.Color(0, 0, 0));
        jName.setText("jLabel2");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("jLabel3");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(128, 128, 128)
                .addComponent(jName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(168, 168, 168)
                .addComponent(jLabel4)
                .addGap(34, 34, 34))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jName)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 690, 40));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setForeground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("SALES");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 80, 40));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/market1.jpg"))); // NOI18N
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 150));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void checkBirthday() {
        //check birthday
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");                               //db name       //username //password
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement ps = con.prepareStatement("select * from users");

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

                staff_name = rs.getString(1); //name
//                jTextField4.setText(rs.getString(2));
//                jTextField5.setText(rs.getString(7));

                department = rs.getString(4);
                type = rs.getString(5);
                dob = rs.getString(6);

                LocalDate currentDate = LocalDate.now();

                //converts it to mm-dd
                String currentDayMonth = currentDate.format(DateTimeFormatter.ofPattern("MM-dd"));

                //gets users birth date
                // Extract day and month from the user's date
                String userDayMonth = new SimpleDateFormat("MM-dd").format(new SimpleDateFormat("yyyy-MM-dd").parse(dob));

                if (currentDayMonth.equals(userDayMonth)) {
                    // Show a birthday message
                    text = "Happy Birthday, " + staff_name + "!";
                    JOptionPane.showMessageDialog(rootPane, text);
                    messages.add(text);
                    System.out.println(staff_name);
                    System.out.println(department);
                }
            }

        } catch (Exception e) {

        }
    }

    private void checkExpiry() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");                               //db name       //username //password
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement ps = con.prepareStatement("select * from inventory");

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                product = rs.getString(1);  //product name
                expiry = rs.getString(5);

                System.out.println(product);
                System.out.println(expiry);

                LocalDate currentDate = LocalDate.now();

                // Parse expiry to LocalDate
                LocalDate expiryDate = LocalDate.parse(expiry, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                // Calculate one month before expiry
                LocalDate oneMonthBeforeExpiry = expiryDate.minusMonths(1);

                // Check if the current date is one month before the expiry date
                //if it is equal to one month exactly
                if (currentDate.isEqual(oneMonthBeforeExpiry) && currentDate.isBefore(expiryDate)) {
                    long daysLeft = ChronoUnit.DAYS.between(currentDate, expiryDate);
                    text = product + " expiry approaching. " + daysLeft + " 1 month to expiry";
                    messages.add(text);
                    JOptionPane.showMessageDialog(rootPane, text);
                    System.out.println(product);

                    //if it is after oneMonth of xpiry but before expiry
                } else if (currentDate.isAfter(oneMonthBeforeExpiry) && currentDate.isBefore(expiryDate)) {
                    long daysLeft = ChronoUnit.DAYS.between(currentDate, expiryDate);
                    text = product + " expiry approaching. " + daysLeft + " days to expiry";
                    messages.add(text);
                    JOptionPane.showMessageDialog(rootPane, text);
                    System.out.println(product);

                } else if (currentDate.equals(expiryDate) || currentDate.isAfter(expiryDate)) {
                    text = product + " expired on " + expiry;
                    messages.add(text);
                    JOptionPane.showMessageDialog(null, text);
                }
            }

        } catch (Exception e) {

        }

    }

    private void paucafe() {
        purchaseId = 15020 + (int) (Math.random() * 80900);
        jTextArea1.setText("*************PAU CAFETERIA*************\n"
                + "Date & Time: " + "" + "\n"
                + "Purchase ID: \t\t" + purchaseId + "\n"
                + "*********************************************\n"
                + "\n"
                + "Item Name:\t\t" + "Price(₦) \n");

    }

//sets to the db the date and purchaseID of the sale carried out by a cashier
    private void updateNumberOfSalesMade() {
        try {

            Class.forName("com.mysql.cj.jdbc.Driver");                               //db name       //username //password
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            PreparedStatement ps = con.prepareStatement("insert into sales_metric values(?,?,?)");

            LocalDate currentDate = LocalDate.now();

            //converts it to mm-dd
            String currentDay = currentDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

            ps.setInt(1, purchaseId);

            ps.setString(2, currentDay);
            ps.setString(3, staff_id);

            int rs = ps.executeUpdate();

            JOptionPane.showMessageDialog(null, name + "'s record has been insert");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    //on click of the total button extract all the data currently on the table and send to the database
 private void updateSalesReport() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            LocalDate currentDate = LocalDate.now();

            //converts it to mm-dd
            String currentDay = currentDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String product_name_to_reports = tableModel.getValueAt(i, 0).toString();
                String product_code_to_reports = tableModel.getValueAt(i, 1).toString();
                int quantity_to_reports = Integer.parseInt(tableModel.getValueAt(i, 2).toString());
                String price_per_item = tableModel.getValueAt(i, 3).toString();

                // Use the extracted data to insert into the database
                String insertQuery = "insert into sales_report (product_code, name, quantity, price, date)  values (?,?,?,?,?)";
                try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                    insertStatement.setString(1, product_code_to_reports);
                    insertStatement.setString(2, product_name_to_reports);
                    insertStatement.setInt(3, quantity_to_reports);
                    insertStatement.setString(4, price_per_item);
                    insertStatement.setString(5, currentDay);

                    int insertResult = insertStatement.executeUpdate();

                    if (insertResult > 0) {
                        // Insertion successful
                        System.out.println("Row inserted successfully into sales_table.");
                    } else {
                        // Insertion failed
                        System.out.println("Failed to insert row into sales_table.");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddActionPerformed

        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
            String item = jTextField1.getText();

            quantity = Integer.parseInt(jSpinner1.getValue().toString());
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

            // Clear existing rows in the table
            // tableModel.setRowCount(0);
            String selectQuery = "SELECT * FROM inventory where product_name = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

            // Execute the query and process the results
            preparedStatement.setString(1, item);

            ResultSet resultSet = preparedStatement.executeQuery();

            // if item is found
            if (resultSet.next()) {
                //here gets the actual total quantity from the db
                int actual_quantity = Integer.parseInt(resultSet.getString("quantity"));

                product_name = resultSet.getString("product_name");
                System.out.println(product_name);

                product_code = resultSet.getString("product_code");
                System.out.println(product_code);

                //for every add, fetch the the amount_sold of the item from the db
                amount_sold = Integer.parseInt(resultSet.getString("amount_sold"));
                System.out.println("" + actual_quantity);
                System.out.println("" + amount_sold);

                //here gets the limit that would be used to signal the the cashier
                int actual_quantity_limit = Integer.parseInt(resultSet.getString("quantity_limit"));
                System.out.println("" + actual_quantity_limit);

                //here gets the expiry date
                expiry_date = resultSet.getString("expiry_date");
                System.out.println(expiry_date);

                // Parse expiry_date to LocalDate
                LocalDate expiryDate = LocalDate.parse(expiry_date, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

                LocalDate currentDate = LocalDate.now();

                // Compare the entire dates (localdates and not strings are being compared)
                //if current date is expired
                if (currentDate.equals(expiryDate) || currentDate.isAfter(expiryDate)) {
                    JOptionPane.showMessageDialog(null, "The good expired on " + expiry_date);
                } //good has not expired
                else {
                    //if nothing is selected from the spinner
                    if (quantity <= 0) {
                        JOptionPane.showMessageDialog(null, "Quantity can't be zero. Make use of the quanity spinner");
                    } else {
                        //if quantity from spinner selected is greater than the quantity in the db
                        if (quantity > actual_quantity) {
                            JOptionPane.showMessageDialog(null, "Not enough stock");
                        } //quantity from the spinner is valid
                        else {
                            //if quantity from the db is less than the limit, alert! and do the remaining parts
                            if (actual_quantity <= actual_quantity_limit) {

                                JOptionPane.showMessageDialog(null, "Stock is getting low");
                                //column count   
                                Object[] row = new Object[4];

                                // sets the rows with name, code, price and quantity
                                row[0] = resultSet.getObject("product_name");
                                row[1] = resultSet.getObject("product_code");
                                row[2] = quantity;  //quantity from the spinner

                                price = Integer.parseInt(resultSet.getString("price"));

                                //conversion of the price from int to float
                                double f_price = (float) price;
                                new_price = quantity * f_price;

                                row[3] = new_price;

                                tableModel.addRow(row);
                                sub_total += new_price;

                                setPrice();

                                //increase the amount sold by the quantity chosen from the spinner
                                amount_sold = amount_sold + quantity;
                                //String amount_soldD = String.valueOf(amount_sold);
                                System.out.println("Amount sold: " + amount_sold);

                                //update quantity basically actual_quantity from above - quantity selected froom spinner
                                actual_quantity = actual_quantity - quantity;
                                String quanToDb = String.valueOf(actual_quantity);
                                System.out.println(actual_quantity);

                                PreparedStatement ps = connection.prepareStatement("update inventory set quantity=?, amount_sold=? where product_name=?");

                                ps.setString(3, item);
                                ps.setString(1, quanToDb);
                                ps.setInt(2, amount_sold);

                                int rs = ps.executeUpdate(); //wow!

//                                updateSalesReport();
                            } else {
                                //same as above; just doesn't alert
                                Object[] row = new Object[4];

                                // Replace "columnName1", "columnName2", ... with actual column names
                                row[0] = resultSet.getObject("product_name");
                                row[1] = resultSet.getObject("product_code");
                                row[2] = quantity;

                                price = Integer.parseInt(resultSet.getString("price"));

                                //conversion of the price from int to float
                                double f_price = (float) price;
                                new_price = quantity * f_price;

                                row[3] = new_price;

                                tableModel.addRow(row);
                                sub_total += new_price;
                                setPrice();

                                amount_sold = amount_sold + quantity;
//                                String amount_soldD = String.valueOf(amount_sold);
                                System.out.println("Amount sold: " + amount_sold);

                                //update quantity basically actual_quantity from above - quantity selected froom spinner
                                actual_quantity = actual_quantity - quantity;
                                String quanToDb = String.valueOf(actual_quantity);
                                System.out.println(actual_quantity);

                                PreparedStatement ps = connection.prepareStatement("update inventory set quantity=?, amount_sold=? where product_name=?");

                                ps.setString(3, item);
                                ps.setString(1, quanToDb);
                                ps.setInt(2, amount_sold);
                                int rs = ps.executeUpdate();

//                                updateSalesReport();
                            }
                        }

                    }
                }

                // row[4] = resultSet.getObject("marks");
                // Add more columns as needed
                // Add the row to the tableModel
            } else {
                JOptionPane.showMessageDialog(null, "Item not found");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }//GEN-LAST:event_jAddActionPerformed

    public void setPrice() {
        jSubTotal.setText(String.format("%.1f", (sub_total)));
    }

    private void jPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrintActionPerformed
        try {
            jTextArea1.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Sales.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jPrintActionPerformed

    private void jSubTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSubTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSubTotalActionPerformed

    private void jTotalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTotalBtnActionPerformed
        if (sub_total == 0.0) {
            JOptionPane.showMessageDialog(null, "Nothing has been purchased yet");
        } else {

            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            int rowCount = tableModel.getRowCount();

            for (int row = 0; row < rowCount; row++) {
                //gets the selected rows 0 & 3 from the db and sets to the text area
                Object value1 = tableModel.getValueAt(row, 0); // Assuming row[0] is the first column
                Object value2 = tableModel.getValueAt(row, 3); // Assuming row[3] is the fourth column

                // Append the data to the text area
                jTextArea1.append(value1.toString() + "\t\t" + value2.toString() + "\n");
            }
            jTextArea1.append(
                    "*********************************************\n"
                    + "Sub Total: \t\t" + sub_total + "\n"
                    + "******************ENJOY!*********************"
            );

            jAdd.setEnabled(false);
            jTextArea1.setEditable(false);
            jSpinner1.setEnabled(false);
            jTotalBtn.setEnabled(false);
            jButton5.setEnabled(false);

            updateNumberOfSalesMade();
            updateSalesReport(); 
        }

    }//GEN-LAST:event_jTotalBtnActionPerformed

    private void jClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearActionPerformed
        jAdd.setEnabled(true);
        jTextArea1.setEditable(true);
        jTextArea1.setText("");
        jSpinner1.setEnabled(true);
        jSpinner1.setValue(0);
        jTotalBtn.setEnabled(true);
        jTax.setText("0");
        jSubTotal.setText("0");
        jTotal.setText("0");
        jTextField1.setText("");
        sub_total = 0.0;

        DefaultTableModel td = (DefaultTableModel) jTable1.getModel();
        td.setRowCount(0);
        paucafe();
    }//GEN-LAST:event_jClearActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            table.removeRow(selectedRow);

            sub_total -= dprice1;

            setPrice();
            try {
                String selectQuery = "SELECT * FROM inventory where product_name = ? ";

                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_system", "root", "stanislaus1@");
                PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);

                preparedStatement.setString(1, dproduct);

                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    //when the item was added, the quantity reduced, thus reduced_quantity
                    int reduced_quantity = Integer.parseInt(resultSet.getString("quantity"));
                    System.out.println("" + reduced_quantity);

                    //when the item was added, the quantity reduced, thus reduced_quantity
                    int decreased_amount_sold = Integer.parseInt(resultSet.getString("amount_sold"));
                    System.out.println("" + decreased_amount_sold);

                    product_code = resultSet.getString("product_code");
                    System.out.println(product_code);

                    //basically lets say it was reduced from 20 to 17(updated to db), the quan would have been 3, so we are adding quan back to 17 and updating it to db to get back the actual_quantity
                    reduced_quantity = reduced_quantity + dquan1;

                    //basically lets say if the the amount sold is 8, from 0, it would reduce from 8 to 0 using th quan
                    decreased_amount_sold = decreased_amount_sold - dquan1;

                    //note actual quanatity decreases, amount sold increases
                    String increased_back_quan_todb = String.valueOf(reduced_quantity);
                    System.out.println("" + increased_back_quan_todb);

                    PreparedStatement ps = connection.prepareStatement("update inventory set quantity=?, amount_sold=? where product_name=?");

                    ps.setString(3, dproduct);
                    ps.setString(1, increased_back_quan_todb);
                    ps.setInt(2, decreased_amount_sold);
                    int rs = ps.executeUpdate();

                    if (decreased_amount_sold >= 0) {
                        //for sales report
                        ps = connection.prepareStatement("update sales_report set quantity_sold=? where product_code=?");

                        ps.setString(2, product_code);
                        ps.setInt(1, decreased_amount_sold);

                        rs = ps.executeUpdate();
                    } else {
                        JOptionPane.showMessageDialog(null, "It is zero already");
                    }

                }
            } catch (Exception e) {

            }

            jSpinner1.setValue(0);

        } else {
            // Inform the user that no row is selected
            JOptionPane.showMessageDialog(this, "No row selected. Please select a row to delete.");
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();

        dproduct = table.getValueAt(jTable1.getSelectedRow(), 0).toString();  // Convert Integer to String
        table.getValueAt(jTable1.getSelectedRow(), 1).toString(); // GETS THE PRODUCT CODE AND STORES IT
        dquan1 = Integer.parseInt(table.getValueAt(jTable1.getSelectedRow(), 2).toString());
        dprice1 = Float.parseFloat(table.getValueAt(jTable1.getSelectedRow(), 3).toString());

        System.out.println(dproduct);
        System.out.println(dquan1);
        System.out.println(dprice1);
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sales("", "", "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAdd;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jClear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jPrint;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jSubTotal;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTax;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTotal;
    private javax.swing.JButton jTotalBtn;
    // End of variables declaration//GEN-END:variables
}
